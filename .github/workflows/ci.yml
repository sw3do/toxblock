name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [16.x, 18.x, 20.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run linter
      run: npm run lint
    
    - name: Run tests
      run: npm run test:coverage
      env:
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
    

    
    - name: Build project
      run: npm run build
    
    - name: Generate documentation
      run: npm run docs
      if: matrix.node-version == '20.x'
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      if: matrix.node-version == '20.x'
      with:
        name: build-artifacts
        path: |
          dist/
          docs/

  security:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run security audit
      run: npm audit --audit-level=moderate
    
    - name: Check for vulnerabilities
      run: npx audit-ci --moderate

  publish:
    needs: [test, security]
    runs-on: ubuntu-latest
    if: github.event_name == 'release' && github.event.action == 'published'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        registry-url: 'https://registry.npmjs.org'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build project
      run: npm run build
    
    - name: Publish to NPM
      run: npm publish
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
    
    - name: Create GitHub release assets
      run: |
        tar -czf toxblock-${{ github.event.release.tag_name }}.tar.gz dist/
        zip -r toxblock-${{ github.event.release.tag_name }}.zip dist/
    
    - name: Upload release assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./toxblock-${{ github.event.release.tag_name }}.tar.gz
        asset_name: toxblock-${{ github.event.release.tag_name }}.tar.gz
        asset_content_type: application/gzip